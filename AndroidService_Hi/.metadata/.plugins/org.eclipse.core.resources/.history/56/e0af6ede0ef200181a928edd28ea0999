package servlet;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import entity.User;

import service.UserService;
import socket.MySocketServ;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

public class UserServlet extends HttpServlet {
	
	private UserService userService=new UserService();

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request,response);
	}

	
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		request.setCharacterEncoding("utf-8");
		response.setContentType("text/html;charset=utf-8");
		String action=request.getParameter("action");
		
		if("login".equals(action)){
			login(request,response);
		}else if("getFriends".equals(action)){
			getFriends(request,response);
		}else if("register".equals(action)){
			register(request,response);
		}else if("hasUser".equals(action)){
			hasUser(request,response);
		}else if("searchFriends".equals(action)){
			searchFriends(request,response);
		}else if("getOneUser".equals(action)){
			getOneUser(request,response);
		}else if("addFriendAsk".equals(action)){
			addFriendAsk(request,response);
		}else if("addFriendReceive".equals(action)){
			addFriendReceive(request,response);
		}else if("getFriendAddList".equals(action)){
			getFriendAddList(request,response);
		}else if("uploadImg".equals(action)){
			uploadImg(request,response);
		}else if("getMyInfo".equals(action)){
			getMyInfo(request,response);
		}else if("updateMyInfo".equals(action)){
			updateMyInfo(request,response);
		}else if("getOther".equals(action)){
			getOther(request,response);
		}
	}
	
	


	private void getOther(HttpServletRequest request,
			HttpServletResponse response) {
		String id=request.getParameter("id");
		JSONArray jsonArray=userService.getOtherList(id);
		try {
			response.getWriter().write(jsonArray.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}


	private void updateMyInfo(HttpServletRequest request,
			HttpServletResponse response) {
		String id=request.getParameter("id");
		String username=request.getParameter("username");
		String password=request.getParameter("password");
		String email=request.getParameter("email");
		String phone=request.getParameter("phone");
		String imgurl=request.getParameter("imgurl");
		
		User user=new User();
		user.setId(Integer.parseInt(id));
		user.setUsername(username);
		user.setPassword(password);
		user.setEmail(email);
		user.setPhone(phone);
		user.setImgurl(imgurl);
		
		boolean flag= userService.updateMyInfo(user);
		try {
			if(flag){
				
				response.getWriter().write("y");
				
			}else{
				response.getWriter().write("n");
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}


	private void getMyInfo(HttpServletRequest request,
			HttpServletResponse response) {
		String id=request.getParameter("id");
		JSONObject jsonObject=userService.getMyInfo(id);
		try {
			response.getWriter().write(jsonObject.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}


	private void uploadImg(HttpServletRequest request,
			HttpServletResponse response) {
//		request.setCharacterEncoding("utf-8");  
        //获得磁盘文件条目工厂。  
        DiskFileItemFactory factory = new DiskFileItemFactory();  
        //获取文件上传需要保存的路径，upload文件夹需存在。  
        String path = request.getSession().getServletContext().getRealPath("/imgs");  
        //设置暂时存放文件的存储室，这个存储室可以和最终存储文件的文件夹不同。因为当文件很大的话会占用过多内存所以设置存储室。  
        factory.setRepository(new File(path));  
        //设置缓存的大小，当上传文件的容量超过缓存时，就放到暂时存储室。  
        factory.setSizeThreshold(1024*1024);  
        //上传处理工具类（高水平API上传处理？）  
        ServletFileUpload upload = new ServletFileUpload(factory);  

        try{  
            //调用 parseRequest（request）方法  获得上传文件 FileItem 的集合list 可实现多文件上传。  
            List<FileItem> list = (List<FileItem>)upload.parseRequest(request);  
            for(FileItem item:list){  
                //获取表单属性名字。  
                String name = item.getFieldName();  
                //如果获取的表单信息是普通的文本信息。即通过页面表单形式传递来的字符串。  
                if(item.isFormField()){  
                    //获取用户具体输入的字符串，  
                    String value = item.getString();  
                    request.setAttribute(name, value);  
                }  
                //如果传入的是非简单字符串，而是图片，音频，视频等二进制文件。  
                else{   
                    //获取路径名  
                    String value = item.getName();  
                    //取到最后一个反斜杠。  
                    int start = value.lastIndexOf("\\");  
                    //截取上传文件的 字符串名字。+1是去掉反斜杠。  
                    String filename = value.substring(start+1);  
                    request.setAttribute(name, filename);  

                    /*第三方提供的方法直接写到文件中。 
                     * item.write(new File(path,filename));*/  
                    //收到写到接收的文件中。  
                    OutputStream out = new FileOutputStream(new File(path,filename));  
                    InputStream in = item.getInputStream();  

                    int length = 0;  
                    byte[] buf = new byte[1024];  
                    System.out.println("获取文件总量的容量:"+ item.getSize());  

                    while((length = in.read(buf))!=-1){  
                        out.write(buf,0,length);  
                    }  
                    in.close();  
                    out.close();  
                }  
            }  
        }catch(Exception e){  
            e.printStackTrace();  
        }  
		
	}


	private void getFriendAddList(HttpServletRequest request,
			HttpServletResponse response) {
		String fid=request.getParameter("fid");
//		System.out.println("asdasdasd"+fid);
		JSONArray jsonArray=userService.getAddList(fid);
		try {
			response.getWriter().write(jsonArray.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}


	private void addFriendReceive(HttpServletRequest request,
			HttpServletResponse response) {
		
		String requestid=request.getParameter("id");
		String uid=request.getParameter("uid");
		String fid=request.getParameter("fid");

		
		userService.addFriendReceive(requestid,uid, fid);
		
	}


	private void addFriendAsk(HttpServletRequest request,
			HttpServletResponse response) {
		String uid=request.getParameter("uid");
		String fid=request.getParameter("fid");
		
		userService.addFriendAsk(uid,fid);
		
		
	}


	private void getOneUser(HttpServletRequest request,
			HttpServletResponse response) {
		String id=request.getParameter("id");
		JSONObject jsonObject=userService.getOneUser(id);
		try {
			response.getWriter().write(jsonObject.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	private void searchFriends(HttpServletRequest request,
			HttpServletResponse response) {
		String username=request.getParameter("username");
		JSONArray jsonArray=userService.searchFriends(username);
		System.out.println(jsonArray.toString());
		try {
			response.getWriter().write(jsonArray.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}


	private void hasUser(HttpServletRequest request,
			HttpServletResponse response) {
		String username=request.getParameter("username");
		
		boolean flag= userService.hasUser(username);
		try {
			if(flag){
				
				response.getWriter().write("y");
				
			}else{
				response.getWriter().write("n");
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	private void register(HttpServletRequest request,
			HttpServletResponse response) {
		String username=request.getParameter("username");
		
		//解决中文登录乱码
				try {
					username=URLDecoder.decode(URLDecoder.decode(username, "UTF-8"));
				} catch (UnsupportedEncodingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		System.out.println("aaa"+username);
		
		String password=request.getParameter("password");
		String email=request.getParameter("email");
		String phone=request.getParameter("phone");
		String imgurl=request.getParameter("imgurl");
		
		User user=new User();
		user.setUsername(username);
		user.setPassword(password);
		user.setEmail(email);
		user.setPhone(phone);
		user.setImgurl(imgurl);
		boolean flag= userService.register(user);
		try {
			if(flag){
				
				response.getWriter().write("y");
				
			}else{
				response.getWriter().write("n");
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}


	private void getFriends(HttpServletRequest request,
			HttpServletResponse response) {
		String id=request.getParameter("id");
		JSONObject jsonObject=userService.getFriendsJson(id);
		try {
			response.getWriter().write(jsonObject.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}


	private void login(HttpServletRequest request, HttpServletResponse response) {
		
		String username=request.getParameter("username");
		
		//解决中文登录乱码
		try {
			username=URLDecoder.decode(URLDecoder.decode(username, "UTF-8"));
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		
		String password=request.getParameter("password");
		User user=userService.login(username,password);
		JSONObject jsonObject = new JSONObject();  //创建Json对象
		if(user!=null){
			
			jsonObject.put("username", user.getUsername());         //设置Json对象的属性
			jsonObject.put("password", user.getPassword());
			jsonObject.put("id", user.getId());
			jsonObject.put("imgurl", user.getImgurl());
		}
		
		
		try {
			response.getWriter().write(jsonObject.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
